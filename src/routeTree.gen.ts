/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ProtectedRouteImport } from './routes/_protected'
import { Route as ProtectedIndexRouteImport } from './routes/_protected/index'
import { Route as ProtectedRaiseTicketRouteImport } from './routes/_protected/raise-ticket'
import { Route as PublicODataODataRouteImport } from './routes/_public/o-data/o-data'
import { Route as PublicAuthRegisterRouteImport } from './routes/_public/auth/register'
import { Route as PublicAuthLoginRouteImport } from './routes/_public/auth/login'
import { Route as PublicAuthForgotPasswordRouteImport } from './routes/_public/auth/forgot-password'
import { Route as ProtectedTicketpageTicketIdRouteImport } from './routes/_protected/ticketpage/$ticketId'
import { Route as ProtectedTheDojoAdminRouteRouteImport } from './routes/_protected/the-dojo/admin/route'
import { Route as ProtectedTheDojoAdminUsersIndexRouteImport } from './routes/_protected/the-dojo/admin/users/index'
import { Route as ProtectedTheDojoAdminTasksIndexRouteImport } from './routes/_protected/the-dojo/admin/tasks/index'
import { Route as ProtectedTheDojoAdminSubjectsIndexRouteImport } from './routes/_protected/the-dojo/admin/subjects/index'
import { Route as ProtectedTheDojoAdminUsersRecordIdRouteImport } from './routes/_protected/the-dojo/admin/users/$recordId'
import { Route as ProtectedTheDojoAdminTasksRecordIdRouteImport } from './routes/_protected/the-dojo/admin/tasks/$recordId'
import { Route as ProtectedTheDojoAdminSubjectsRecordIdRouteImport } from './routes/_protected/the-dojo/admin/subjects/$recordId'

const ProtectedRoute = ProtectedRouteImport.update({
  id: '/_protected',
  getParentRoute: () => rootRouteImport,
} as any)
const ProtectedIndexRoute = ProtectedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ProtectedRoute,
} as any)
const ProtectedRaiseTicketRoute = ProtectedRaiseTicketRouteImport.update({
  id: '/raise-ticket',
  path: '/raise-ticket',
  getParentRoute: () => ProtectedRoute,
} as any)
const PublicODataODataRoute = PublicODataODataRouteImport.update({
  id: '/_public/o-data/o-data',
  path: '/o-data/o-data',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicAuthRegisterRoute = PublicAuthRegisterRouteImport.update({
  id: '/_public/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicAuthLoginRoute = PublicAuthLoginRouteImport.update({
  id: '/_public/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicAuthForgotPasswordRoute =
  PublicAuthForgotPasswordRouteImport.update({
    id: '/_public/auth/forgot-password',
    path: '/auth/forgot-password',
    getParentRoute: () => rootRouteImport,
  } as any)
const ProtectedTicketpageTicketIdRoute =
  ProtectedTicketpageTicketIdRouteImport.update({
    id: '/ticketpage/$ticketId',
    path: '/ticketpage/$ticketId',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedTheDojoAdminRouteRoute =
  ProtectedTheDojoAdminRouteRouteImport.update({
    id: '/the-dojo/admin',
    path: '/the-dojo/admin',
    getParentRoute: () => ProtectedRoute,
  } as any)
const ProtectedTheDojoAdminUsersIndexRoute =
  ProtectedTheDojoAdminUsersIndexRouteImport.update({
    id: '/users/',
    path: '/users/',
    getParentRoute: () => ProtectedTheDojoAdminRouteRoute,
  } as any)
const ProtectedTheDojoAdminTasksIndexRoute =
  ProtectedTheDojoAdminTasksIndexRouteImport.update({
    id: '/tasks/',
    path: '/tasks/',
    getParentRoute: () => ProtectedTheDojoAdminRouteRoute,
  } as any)
const ProtectedTheDojoAdminSubjectsIndexRoute =
  ProtectedTheDojoAdminSubjectsIndexRouteImport.update({
    id: '/subjects/',
    path: '/subjects/',
    getParentRoute: () => ProtectedTheDojoAdminRouteRoute,
  } as any)
const ProtectedTheDojoAdminUsersRecordIdRoute =
  ProtectedTheDojoAdminUsersRecordIdRouteImport.update({
    id: '/users/$recordId',
    path: '/users/$recordId',
    getParentRoute: () => ProtectedTheDojoAdminRouteRoute,
  } as any)
const ProtectedTheDojoAdminTasksRecordIdRoute =
  ProtectedTheDojoAdminTasksRecordIdRouteImport.update({
    id: '/tasks/$recordId',
    path: '/tasks/$recordId',
    getParentRoute: () => ProtectedTheDojoAdminRouteRoute,
  } as any)
const ProtectedTheDojoAdminSubjectsRecordIdRoute =
  ProtectedTheDojoAdminSubjectsRecordIdRouteImport.update({
    id: '/subjects/$recordId',
    path: '/subjects/$recordId',
    getParentRoute: () => ProtectedTheDojoAdminRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/raise-ticket': typeof ProtectedRaiseTicketRoute
  '/': typeof ProtectedIndexRoute
  '/the-dojo/admin': typeof ProtectedTheDojoAdminRouteRouteWithChildren
  '/ticketpage/$ticketId': typeof ProtectedTicketpageTicketIdRoute
  '/auth/forgot-password': typeof PublicAuthForgotPasswordRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/o-data/o-data': typeof PublicODataODataRoute
  '/the-dojo/admin/subjects/$recordId': typeof ProtectedTheDojoAdminSubjectsRecordIdRoute
  '/the-dojo/admin/tasks/$recordId': typeof ProtectedTheDojoAdminTasksRecordIdRoute
  '/the-dojo/admin/users/$recordId': typeof ProtectedTheDojoAdminUsersRecordIdRoute
  '/the-dojo/admin/subjects': typeof ProtectedTheDojoAdminSubjectsIndexRoute
  '/the-dojo/admin/tasks': typeof ProtectedTheDojoAdminTasksIndexRoute
  '/the-dojo/admin/users': typeof ProtectedTheDojoAdminUsersIndexRoute
}
export interface FileRoutesByTo {
  '/raise-ticket': typeof ProtectedRaiseTicketRoute
  '/': typeof ProtectedIndexRoute
  '/the-dojo/admin': typeof ProtectedTheDojoAdminRouteRouteWithChildren
  '/ticketpage/$ticketId': typeof ProtectedTicketpageTicketIdRoute
  '/auth/forgot-password': typeof PublicAuthForgotPasswordRoute
  '/auth/login': typeof PublicAuthLoginRoute
  '/auth/register': typeof PublicAuthRegisterRoute
  '/o-data/o-data': typeof PublicODataODataRoute
  '/the-dojo/admin/subjects/$recordId': typeof ProtectedTheDojoAdminSubjectsRecordIdRoute
  '/the-dojo/admin/tasks/$recordId': typeof ProtectedTheDojoAdminTasksRecordIdRoute
  '/the-dojo/admin/users/$recordId': typeof ProtectedTheDojoAdminUsersRecordIdRoute
  '/the-dojo/admin/subjects': typeof ProtectedTheDojoAdminSubjectsIndexRoute
  '/the-dojo/admin/tasks': typeof ProtectedTheDojoAdminTasksIndexRoute
  '/the-dojo/admin/users': typeof ProtectedTheDojoAdminUsersIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_protected': typeof ProtectedRouteWithChildren
  '/_protected/raise-ticket': typeof ProtectedRaiseTicketRoute
  '/_protected/': typeof ProtectedIndexRoute
  '/_protected/the-dojo/admin': typeof ProtectedTheDojoAdminRouteRouteWithChildren
  '/_protected/ticketpage/$ticketId': typeof ProtectedTicketpageTicketIdRoute
  '/_public/auth/forgot-password': typeof PublicAuthForgotPasswordRoute
  '/_public/auth/login': typeof PublicAuthLoginRoute
  '/_public/auth/register': typeof PublicAuthRegisterRoute
  '/_public/o-data/o-data': typeof PublicODataODataRoute
  '/_protected/the-dojo/admin/subjects/$recordId': typeof ProtectedTheDojoAdminSubjectsRecordIdRoute
  '/_protected/the-dojo/admin/tasks/$recordId': typeof ProtectedTheDojoAdminTasksRecordIdRoute
  '/_protected/the-dojo/admin/users/$recordId': typeof ProtectedTheDojoAdminUsersRecordIdRoute
  '/_protected/the-dojo/admin/subjects/': typeof ProtectedTheDojoAdminSubjectsIndexRoute
  '/_protected/the-dojo/admin/tasks/': typeof ProtectedTheDojoAdminTasksIndexRoute
  '/_protected/the-dojo/admin/users/': typeof ProtectedTheDojoAdminUsersIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/raise-ticket'
    | '/'
    | '/the-dojo/admin'
    | '/ticketpage/$ticketId'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/o-data/o-data'
    | '/the-dojo/admin/subjects/$recordId'
    | '/the-dojo/admin/tasks/$recordId'
    | '/the-dojo/admin/users/$recordId'
    | '/the-dojo/admin/subjects'
    | '/the-dojo/admin/tasks'
    | '/the-dojo/admin/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/raise-ticket'
    | '/'
    | '/the-dojo/admin'
    | '/ticketpage/$ticketId'
    | '/auth/forgot-password'
    | '/auth/login'
    | '/auth/register'
    | '/o-data/o-data'
    | '/the-dojo/admin/subjects/$recordId'
    | '/the-dojo/admin/tasks/$recordId'
    | '/the-dojo/admin/users/$recordId'
    | '/the-dojo/admin/subjects'
    | '/the-dojo/admin/tasks'
    | '/the-dojo/admin/users'
  id:
    | '__root__'
    | '/_protected'
    | '/_protected/raise-ticket'
    | '/_protected/'
    | '/_protected/the-dojo/admin'
    | '/_protected/ticketpage/$ticketId'
    | '/_public/auth/forgot-password'
    | '/_public/auth/login'
    | '/_public/auth/register'
    | '/_public/o-data/o-data'
    | '/_protected/the-dojo/admin/subjects/$recordId'
    | '/_protected/the-dojo/admin/tasks/$recordId'
    | '/_protected/the-dojo/admin/users/$recordId'
    | '/_protected/the-dojo/admin/subjects/'
    | '/_protected/the-dojo/admin/tasks/'
    | '/_protected/the-dojo/admin/users/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ProtectedRoute: typeof ProtectedRouteWithChildren
  PublicAuthForgotPasswordRoute: typeof PublicAuthForgotPasswordRoute
  PublicAuthLoginRoute: typeof PublicAuthLoginRoute
  PublicAuthRegisterRoute: typeof PublicAuthRegisterRoute
  PublicODataODataRoute: typeof PublicODataODataRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_protected': {
      id: '/_protected'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProtectedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/': {
      id: '/_protected/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ProtectedIndexRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/raise-ticket': {
      id: '/_protected/raise-ticket'
      path: '/raise-ticket'
      fullPath: '/raise-ticket'
      preLoaderRoute: typeof ProtectedRaiseTicketRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_public/o-data/o-data': {
      id: '/_public/o-data/o-data'
      path: '/o-data/o-data'
      fullPath: '/o-data/o-data'
      preLoaderRoute: typeof PublicODataODataRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/auth/register': {
      id: '/_public/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof PublicAuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/auth/login': {
      id: '/_public/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof PublicAuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/auth/forgot-password': {
      id: '/_public/auth/forgot-password'
      path: '/auth/forgot-password'
      fullPath: '/auth/forgot-password'
      preLoaderRoute: typeof PublicAuthForgotPasswordRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_protected/ticketpage/$ticketId': {
      id: '/_protected/ticketpage/$ticketId'
      path: '/ticketpage/$ticketId'
      fullPath: '/ticketpage/$ticketId'
      preLoaderRoute: typeof ProtectedTicketpageTicketIdRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/the-dojo/admin': {
      id: '/_protected/the-dojo/admin'
      path: '/the-dojo/admin'
      fullPath: '/the-dojo/admin'
      preLoaderRoute: typeof ProtectedTheDojoAdminRouteRouteImport
      parentRoute: typeof ProtectedRoute
    }
    '/_protected/the-dojo/admin/users/': {
      id: '/_protected/the-dojo/admin/users/'
      path: '/users'
      fullPath: '/the-dojo/admin/users'
      preLoaderRoute: typeof ProtectedTheDojoAdminUsersIndexRouteImport
      parentRoute: typeof ProtectedTheDojoAdminRouteRoute
    }
    '/_protected/the-dojo/admin/tasks/': {
      id: '/_protected/the-dojo/admin/tasks/'
      path: '/tasks'
      fullPath: '/the-dojo/admin/tasks'
      preLoaderRoute: typeof ProtectedTheDojoAdminTasksIndexRouteImport
      parentRoute: typeof ProtectedTheDojoAdminRouteRoute
    }
    '/_protected/the-dojo/admin/subjects/': {
      id: '/_protected/the-dojo/admin/subjects/'
      path: '/subjects'
      fullPath: '/the-dojo/admin/subjects'
      preLoaderRoute: typeof ProtectedTheDojoAdminSubjectsIndexRouteImport
      parentRoute: typeof ProtectedTheDojoAdminRouteRoute
    }
    '/_protected/the-dojo/admin/users/$recordId': {
      id: '/_protected/the-dojo/admin/users/$recordId'
      path: '/users/$recordId'
      fullPath: '/the-dojo/admin/users/$recordId'
      preLoaderRoute: typeof ProtectedTheDojoAdminUsersRecordIdRouteImport
      parentRoute: typeof ProtectedTheDojoAdminRouteRoute
    }
    '/_protected/the-dojo/admin/tasks/$recordId': {
      id: '/_protected/the-dojo/admin/tasks/$recordId'
      path: '/tasks/$recordId'
      fullPath: '/the-dojo/admin/tasks/$recordId'
      preLoaderRoute: typeof ProtectedTheDojoAdminTasksRecordIdRouteImport
      parentRoute: typeof ProtectedTheDojoAdminRouteRoute
    }
    '/_protected/the-dojo/admin/subjects/$recordId': {
      id: '/_protected/the-dojo/admin/subjects/$recordId'
      path: '/subjects/$recordId'
      fullPath: '/the-dojo/admin/subjects/$recordId'
      preLoaderRoute: typeof ProtectedTheDojoAdminSubjectsRecordIdRouteImport
      parentRoute: typeof ProtectedTheDojoAdminRouteRoute
    }
  }
}

interface ProtectedTheDojoAdminRouteRouteChildren {
  ProtectedTheDojoAdminSubjectsRecordIdRoute: typeof ProtectedTheDojoAdminSubjectsRecordIdRoute
  ProtectedTheDojoAdminTasksRecordIdRoute: typeof ProtectedTheDojoAdminTasksRecordIdRoute
  ProtectedTheDojoAdminUsersRecordIdRoute: typeof ProtectedTheDojoAdminUsersRecordIdRoute
  ProtectedTheDojoAdminSubjectsIndexRoute: typeof ProtectedTheDojoAdminSubjectsIndexRoute
  ProtectedTheDojoAdminTasksIndexRoute: typeof ProtectedTheDojoAdminTasksIndexRoute
  ProtectedTheDojoAdminUsersIndexRoute: typeof ProtectedTheDojoAdminUsersIndexRoute
}

const ProtectedTheDojoAdminRouteRouteChildren: ProtectedTheDojoAdminRouteRouteChildren =
  {
    ProtectedTheDojoAdminSubjectsRecordIdRoute:
      ProtectedTheDojoAdminSubjectsRecordIdRoute,
    ProtectedTheDojoAdminTasksRecordIdRoute:
      ProtectedTheDojoAdminTasksRecordIdRoute,
    ProtectedTheDojoAdminUsersRecordIdRoute:
      ProtectedTheDojoAdminUsersRecordIdRoute,
    ProtectedTheDojoAdminSubjectsIndexRoute:
      ProtectedTheDojoAdminSubjectsIndexRoute,
    ProtectedTheDojoAdminTasksIndexRoute: ProtectedTheDojoAdminTasksIndexRoute,
    ProtectedTheDojoAdminUsersIndexRoute: ProtectedTheDojoAdminUsersIndexRoute,
  }

const ProtectedTheDojoAdminRouteRouteWithChildren =
  ProtectedTheDojoAdminRouteRoute._addFileChildren(
    ProtectedTheDojoAdminRouteRouteChildren,
  )

interface ProtectedRouteChildren {
  ProtectedRaiseTicketRoute: typeof ProtectedRaiseTicketRoute
  ProtectedIndexRoute: typeof ProtectedIndexRoute
  ProtectedTheDojoAdminRouteRoute: typeof ProtectedTheDojoAdminRouteRouteWithChildren
  ProtectedTicketpageTicketIdRoute: typeof ProtectedTicketpageTicketIdRoute
}

const ProtectedRouteChildren: ProtectedRouteChildren = {
  ProtectedRaiseTicketRoute: ProtectedRaiseTicketRoute,
  ProtectedIndexRoute: ProtectedIndexRoute,
  ProtectedTheDojoAdminRouteRoute: ProtectedTheDojoAdminRouteRouteWithChildren,
  ProtectedTicketpageTicketIdRoute: ProtectedTicketpageTicketIdRoute,
}

const ProtectedRouteWithChildren = ProtectedRoute._addFileChildren(
  ProtectedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  ProtectedRoute: ProtectedRouteWithChildren,
  PublicAuthForgotPasswordRoute: PublicAuthForgotPasswordRoute,
  PublicAuthLoginRoute: PublicAuthLoginRoute,
  PublicAuthRegisterRoute: PublicAuthRegisterRoute,
  PublicODataODataRoute: PublicODataODataRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
